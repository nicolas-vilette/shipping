 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/shops", type: :request do

  # Shop. As you add validations to Shop, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'ShopName', schedules_attributes: {0 => {weekday:"1", shop_status:"1", morning_opens_at:"8:30", morning_closes_at:"12:00", afternoon_opens_at:'13:00', afternoon_closes_at:'20:00'}} }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Shop.create! valid_attributes
      get shops_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      shop = Shop.create! valid_attributes
      get shop_url(shop)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_shop_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      shop = Shop.create! valid_attributes
      get edit_shop_url(shop)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Shop" do
        expect {
          post shops_url, params: { shop: valid_attributes }
        }.to change(Shop, :count).by(1)
      end

      it "redirects to the created shop" do
        post shops_url, params: { shop: valid_attributes }
        expect(response).to redirect_to(shop_url(Shop.last))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: 'New ShopName' }
      }

      it "updates the requested shop" do
        shop = Shop.create! valid_attributes
        patch shop_url(shop), params: { shop: new_attributes }
        shop.reload
      end

      it "redirects to the shop" do
        shop = Shop.create! valid_attributes
        patch shop_url(shop), params: { shop: new_attributes }
        shop.reload
        expect(response).to redirect_to(shop_url(shop))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested shop" do
      shop = Shop.create! valid_attributes
      expect {
        delete shop_url(shop)
      }.to change(Shop, :count).by(-1)
    end

    it "redirects to the shops list" do
      shop = Shop.create! valid_attributes
      delete shop_url(shop)
      expect(response).to redirect_to(shops_url)
    end
  end
end
